{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maynh\\\\OneDrive\\\\Documents\\\\GitHub\\\\CSE110-Project-TritionCook\\\\tritoncook-app\\\\src\\\\context\\\\AccountContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialAccount = {\n  username: \"\",\n  password: \"\"\n};\nconst initialState = {\n  account: initialAccount,\n  setAccount: () => {}\n};\nexport const AccountContext = /*#__PURE__*/createContext(initialState);\nexport const AccountProvider = props => {\n  _s();\n  const [account, setAccount] = useState(initialState.account);\n  return /*#__PURE__*/_jsxDEV(AccountContext.Provider, {\n    value: {\n      account: account,\n      setAccount: setAccount\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(AccountProvider, \"PWnHky6m6odtp8TO3Ov0ulOPoLM=\");\n_c = AccountProvider;\nvar _c;\n$RefreshReg$(_c, \"AccountProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","initialAccount","username","password","initialState","account","setAccount","AccountContext","AccountProvider","props","_s","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/maynh/OneDrive/Documents/GitHub/CSE110-Project-TritionCook/tritoncook-app/src/context/AccountContext.tsx"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { Account } from \"../types/types\"\r\n\r\ninterface AccountContextType {\r\n    account: Account;\r\n    setAccount: React.Dispatch<React.SetStateAction<Account>>;\r\n}\r\n\r\nconst initialAccount = {username:\"\", password: \"\"};\r\nconst initialState: AccountContextType = { \r\n    account: initialAccount,\r\n    setAccount: () => {},\r\n}\r\n\r\nexport const AccountContext = createContext<AccountContextType>(initialState);\r\n\r\nexport const AccountProvider = (props: any) => {\r\n    \r\n    const [account, setAccount] = useState<Account>(initialState.account)\r\n\r\n    return(\r\n        <AccountContext.Provider\r\n        value ={{\r\n            account:account,\r\n            setAccount: setAccount,\r\n        }}\r\n        >\r\n            {props.children}\r\n        </AccountContext.Provider>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQhD,MAAMC,cAAc,GAAG;EAACC,QAAQ,EAAC,EAAE;EAAEC,QAAQ,EAAE;AAAE,CAAC;AAClD,MAAMC,YAAgC,GAAG;EACrCC,OAAO,EAAEJ,cAAc;EACvBK,UAAU,EAAEA,CAAA,KAAM,CAAC;AACvB,CAAC;AAED,OAAO,MAAMC,cAAc,gBAAGV,aAAa,CAAqBO,YAAY,CAAC;AAE7E,OAAO,MAAMI,eAAe,GAAIC,KAAU,IAAK;EAAAC,EAAA;EAE3C,MAAM,CAACL,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAUM,YAAY,CAACC,OAAO,CAAC;EAErE,oBACIL,OAAA,CAACO,cAAc,CAACI,QAAQ;IACxBC,KAAK,EAAG;MACJP,OAAO,EAACA,OAAO;MACfC,UAAU,EAAEA;IAChB,CAAE;IAAAO,QAAA,EAEGJ,KAAK,CAACI;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAElC,CAAC;AAAAP,EAAA,CAdYF,eAAe;AAAAU,EAAA,GAAfV,eAAe;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}